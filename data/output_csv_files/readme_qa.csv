,Question,Context,Answer
0,What is this?,"import chalk from 'chalk';
import inquirer from 'inquirer';
import { marked } from 'marked';
import TerminalRenderer from 'marked-terminal';
import { OpenAIEmbeddings } from 'langchain/embeddings';
import path from 'path';
import { HNSWLib } from '../../../langchain/hnswlib.js';
import { AutodocRepoConfig, AutodocUserConfig } from '../../../types.js';
import { makeChain } from './createChatChain.js';
import { stopSpinner, updateSpinnerText } from '../../spinner.js';

const chatHistory: [string, string][] = [];

marked.setOptions({
  // Define custom renderer
  renderer: new TerminalRenderer(),
});

const displayWelcomeMessage = (projectName: string) => {
  console.log(chalk.bold.blue(`Welcome to the ${projectName} chatbot.`));
  console.log(
    `Ask any questions related to the ${projectName} codebase, and I'll try to help. Type 'exit' to quit.\n`,
  );
};

const clearScreenAndMoveCursorToTop = () => {
  process.stdout.write('\x1B[2J\x1B[0f');
};Chat History:
{chat_history}
Follow Up Input: {question}
Standalone question:`);${contentType}:
    ${fileContents}

    Response:

  `;
};

export const createCodeQuestions = (
  filePath: string,
  projectName: string,
  fileContents: string,
  contentType: string,
  targetAudience: string,
): string => {
  return `
    You are acting as a ${contentType} documentation expert for a project called ${projectName}.
    Below is the ${contentType} from a file located at \`${filePath}\`. 
    What are 3 questions that a ${targetAudience} might have about this ${contentType}? 
    Answer each question in 1-2 sentences. Output should be in markdown format.

    ${contentType}:
    ${fileContents}

    Questions and Answers:
    
  `;
};const questions = [
    {
      type: 'input',
      name: 'name',
      message: chalk.yellow(`Enter the name of your repository:`),
      default: config.name,
    },
    {
      type: 'input',
      name: 'repositoryUrl',
      message: chalk.yellow(`Enter the GitHub URL of your repository:`),
      default: config.repositoryUrl,
    },
    {
      type: 'list',
      name: 'llms',
      message: chalk.yellow(
        `Select which LLMs you have access to (use GPT-3.5 Turbo if you aren't sure):`,
      ),
      default: 0,
      choices: [
        {
          name: 'GPT-3.5 Turbo',
          value: [LLMModels.GPT3],
        },
        {
          name: 'GPT-3.5 Turbo, GPT-4 8K (Early Access)',
          value: [LLMModels.GPT3, LLMModels.GPT4],
        },
        {
          name: 'GPT-3.5 Turbo, GPT-4 8K (Early Access), GPT-4 32K (Early Access)',
          value: [LLMModels.GPT3, LLMModels.GPT4, LLMModels.GPT432k],
        },
      ],
    },
    {
      type: 'input',","Autodoc is a **experimental** toolkit for auto-generating codebase documentation for git repositories using Large Language Models, like [GPT-4](https://openai.com/research/gpt-4) or [Alpaca](https://github.com/ggerganov/llama.cpp). Autodoc can be [installed](#get-started) in your repo in about 5 minutes. It indexes your codebase through a depth-first traversal of all repository contents and calls an LLM to write documentation for each file and folder. These documents can be combined to describe the different components of your system and how they work together. The generated documentation lives in your codebase, and travels where your code travels. Developers who download your code can use the `doc` command to ask questions about your codebase and get highly specific answers with reference links back to code files. In the near future, documentation will be re-indexed as part your CI pipeline, so it is always up-to-date. If your interested in working contributing to this work, see [this issue](https://github.com/context-labs/autodoc/issues/7)."
1,What do you know about the following topic regarding the project autodoc: Requirements?,"Include code examples where appropriate. Keep you response between 100 and 300 words. \n\
      DO NOT RETURN MORE THAN 300 WORDS.\n\
      Output should be in markdown format.\n\
      Do not just list the methods and classes in this file.',
    folderPrompt:
      config?.folderPrompt ??
      'Write a technical explanation of what the code in this folder does\n\
      and how it might fit into the larger project or work with other parts of the project.\n\
      Give examples of how this code might be used. Include code examples where appropriate.\n\
      Be concise. Include any information that may be relevant to a developer who is curious about this code.\n\
      Keep you response under 400 words. Output should be in markdown format.\n\
      Do not just list the files and folders in this folder.',
    chatPrompt: '',
    contentType: 'code',
    targetAudience: 'smart developer',
    linkHosted: false,
  };
};export const makeConfigTemplate = (
  config?: AutodocRepoConfig,
): AutodocRepoConfig => {
  return {
    name: config?.name ?? '',
    repositoryUrl: config?.repositoryUrl ?? '',
    root: '.',
    output: './.autodoc',
    llms:
      config?.llms?.length ?? 0 > 0
        ? (config as AutodocRepoConfig).llms
        : [LLMModels.GPT3],
    priority: Priority.COST,
    maxConcurrentCalls: 25,
    addQuestions: true,
    ignore: [
      '.*',
      '*package-lock.json',
      '*package.json',
      'node_modules',
      '*dist*',
      '*build*',
      '*test*',
      '*.svg',
      '*.md',
      '*.mdx',
      '*.toml',
      '*autodoc*',
    ],
    filePrompt:
      config?.filePrompt ??
      'Write a detailed technical explanation of what this code does. \n\
      Focus on the high-level purpose of the code and how it may be used in the larger project.\n\
      Include code examples where appropriate. Keep you response between 100 and 300 words. \n\const program = new Command();
program.description('Autodoc CLI Tool');
program.version('0.0.9');

program
  .command('init')
  .description(
    'Initialize repository by creating a `autodoc.config.json` file in the current directory.',
  )
  .action(async () => {
    try {
      const config: AutodocRepoConfig = JSON.parse(
        await fs.readFile('./autodoc.config.json', 'utf8'),
      );
      init(config);
    } catch (e) {
      init();
    }
  });

program
  .command('estimate')
  .description('Estimate the cost of running `index` on your respository.')
  .action(async () => {
    try {
      const config: AutodocRepoConfig = JSON.parse(
        await fs.readFile('./autodoc.config.json', 'utf8'),
      );
      estimate(config);
    } catch (e) {
      console.error(
        'Failed to find `autodoc.config.json` file. Did you run `doc init`?',
      );
      console.error(e);
      process.exit(1);
    }
  });const { name, repositoryUrl, llms, filePrompt, folderPrompt } =
    await inquirer.prompt(questions);

  const newConfig = makeConfigTemplate({
    ...config,
    name,
    repositoryUrl,
    llms,
    filePrompt,
    folderPrompt,
  });

  fs.writeFileSync(
    path.join(newConfig.root, 'autodoc.config.json'),
    JSON.stringify(newConfig, null, 2),
    'utf-8',
  );

  console.log(
    chalk.green('Autodoc initialized. Run `doc index` to get started.'),
  );
};

import { OpenAIChat } from 'langchain/llms';
import { LLMChain, ChatVectorDBQAChain, loadQAChain } from 'langchain/chains';
import { PromptTemplate } from 'langchain/prompts';
import { HNSWLib } from '../../../langchain/hnswlib.js';
import { LLMModels } from '../../../types.js';

const CONDENSE_PROMPT =
  PromptTemplate.fromTemplate(`Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.",Autodoc requires Node v18.0.0 or greater. v19.0.0 or greater is recommended. Make sure you're running the proper version: ```bash $ node -v ``` Example output: ```bash v19.8.1 ``` Install the Autodoc CLI tool as a global NPM module: ```bash $ npm install -g @context-labs/autodoc ``` This command installs the Autodoc CLI tool that will allow you to create and query Autodoc indexes. Run `doc` to see the available commands.
2,What do you know about the following topic regarding the project autodoc: Contributing?,"Include code examples where appropriate. Keep you response between 100 and 300 words. \n\
      DO NOT RETURN MORE THAN 300 WORDS.\n\
      Output should be in markdown format.\n\
      Do not just list the methods and classes in this file.',
    folderPrompt:
      config?.folderPrompt ??
      'Write a technical explanation of what the code in this folder does\n\
      and how it might fit into the larger project or work with other parts of the project.\n\
      Give examples of how this code might be used. Include code examples where appropriate.\n\
      Be concise. Include any information that may be relevant to a developer who is curious about this code.\n\
      Keep you response under 400 words. Output should be in markdown format.\n\
      Do not just list the files and folders in this folder.',
    chatPrompt: '',
    contentType: 'code',
    targetAudience: 'smart developer',
    linkHosted: false,
  };
};export const makeConfigTemplate = (
  config?: AutodocRepoConfig,
): AutodocRepoConfig => {
  return {
    name: config?.name ?? '',
    repositoryUrl: config?.repositoryUrl ?? '',
    root: '.',
    output: './.autodoc',
    llms:
      config?.llms?.length ?? 0 > 0
        ? (config as AutodocRepoConfig).llms
        : [LLMModels.GPT3],
    priority: Priority.COST,
    maxConcurrentCalls: 25,
    addQuestions: true,
    ignore: [
      '.*',
      '*package-lock.json',
      '*package.json',
      'node_modules',
      '*dist*',
      '*build*',
      '*test*',
      '*.svg',
      '*.md',
      '*.mdx',
      '*.toml',
      '*autodoc*',
    ],
    filePrompt:
      config?.filePrompt ??
      'Write a detailed technical explanation of what this code does. \n\
      Focus on the high-level purpose of the code and how it may be used in the larger project.\n\
      Include code examples where appropriate. Keep you response between 100 and 300 words. \n\const program = new Command();
program.description('Autodoc CLI Tool');
program.version('0.0.9');

program
  .command('init')
  .description(
    'Initialize repository by creating a `autodoc.config.json` file in the current directory.',
  )
  .action(async () => {
    try {
      const config: AutodocRepoConfig = JSON.parse(
        await fs.readFile('./autodoc.config.json', 'utf8'),
      );
      init(config);
    } catch (e) {
      init();
    }
  });

program
  .command('estimate')
  .description('Estimate the cost of running `index` on your respository.')
  .action(async () => {
    try {
      const config: AutodocRepoConfig = JSON.parse(
        await fs.readFile('./autodoc.config.json', 'utf8'),
      );
      estimate(config);
    } catch (e) {
      console.error(
        'Failed to find `autodoc.config.json` file. Did you run `doc init`?',
      );
      console.error(e);
      process.exit(1);
    }
  });const { name, repositoryUrl, llms, filePrompt, folderPrompt } =
    await inquirer.prompt(questions);

  const newConfig = makeConfigTemplate({
    ...config,
    name,
    repositoryUrl,
    llms,
    filePrompt,
    folderPrompt,
  });

  fs.writeFileSync(
    path.join(newConfig.root, 'autodoc.config.json'),
    JSON.stringify(newConfig, null, 2),
    'utf-8',
  );

  console.log(
    chalk.green('Autodoc initialized. Run `doc index` to get started.'),
  );
};

import { OpenAIChat } from 'langchain/llms';
import { LLMChain, ChatVectorDBQAChain, loadQAChain } from 'langchain/chains';
import { PromptTemplate } from 'langchain/prompts';
import { HNSWLib } from '../../../langchain/hnswlib.js';
import { LLMModels } from '../../../types.js';

const CONDENSE_PROMPT =
  PromptTemplate.fromTemplate(`Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.","As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation. For detailed information on how to contribute, see [here](.github/CONTRIBUTING.md)."
