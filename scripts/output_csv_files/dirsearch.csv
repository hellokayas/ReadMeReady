Title,Content
"If you want to edit dirsearch default configurations, you can",
edit values in this file. Everything after `#` is a comment,
and won't be applied,"[general] threads = 25 recursive = False deep-recursive = False force-recursive = False recursion-status = 200-399,401,403 max-recursion-depth = 0 exclude-subdirs = %%ff/,.;/,..;/,;/,./,../,%%2e/,%%2e%%2e/ random-user-agents = False max-time = 0 exit-on-error = False"
"subdirs = /,api/",
"include-status = 200-299,401",
"exclude-status = 400,500-999",
"exclude-sizes = 0b,123gb",
"exclude-text = ""Not found""",
"exclude-regex = ""^403$""",
"exclude-redirect = ""*/error.html""",
exclude-response = 404.html,
"skip-on-status = 429,999","[dictionary] default-extensions = php,aspx,jsp,html,js force-extensions = False overwrite-extensions = False lowercase = False uppercase = False capitalization = False"
"exclude-extensions = old,log",
"prefixes = .,admin",
"suffixes = ~,.bak",
"wordlists = /path/to/wordlist1.txt,/path/to/wordlist2.txt",[request] http-method = get follow-redirects = False
headers-file = /path/to/headers.txt,
user-agent = MyUserAgent,
cookie = SESSIONID=123,[connection] timeout = 7.5 delay = 0 max-rate = 0 max-retries = 1
"By disabling `scheme` variable, dirsearch will automatically identify the URI scheme",
scheme = http,
proxy = localhost:8080,
proxy-file = /path/to/proxies.txt,
replay-proxy = localhost:8000,[advanced] crawl = False [view] full-url = False quiet-mode = False color = True show-redirects-history = False [output]
"Support: plain, simple, json, xml, md, csv, html, sqlite",report-format = plain autosave-report = True autosave-report-folder = reports/
log-file = /path/to/dirsearch.log,
log-file-size = 50000000,"``` How to use --------------- [![Dirsearch demo](https://asciinema.org/a/380112.svg)](https://asciinema.org/a/380112) Some examples for how to use dirsearch - those are the most common arguments. If you need all, just use the **-h** argument."
Simple usage,"``` python3 dirsearch.py -u https://target ``` ``` python3 dirsearch.py -e php,html,js -u https://target ``` ``` python3 dirsearch.py -e php,html,js -u https://target -w /path/to/wordlist ``` ---"
Pausing progress,"dirsearch allows you to pause the scanning progress with CTRL+C, from here, you can save the progress (and continue later), skip the current target, or skip the current sub-directory. <img src=""static/pause.png"" alt=""Pausing dirsearch"" width=""475px""> ----"
Recursion,"- Recursive brute-force is brute-forcing continuously the after of found directories. For example, if dirsearch finds `admin/`, it will brute-force `admin/*` (`*` is where it brute forces). To enable this feature, use **-r** (or **--recursive**) flag ``` python3 dirsearch.py -e php,html,js -u https://target -r ``` - You can set the max recursion depth with **--max-recursion-depth**, and status codes to recurse with **--recursion-status** ``` python3 dirsearch.py -e php,html,js -u https://target -r --max-recursion-depth 3 --recursion-status 200-399 ``` - There are 2 more options: **--force-recursive** and **--deep-recursive** - **Force recursive**: Brute force recursively all found paths, not just paths end with `/` - **Deep recursive**: Recursive brute-force all depths of a path (`a/b/c` => add `a/`, `a/b/`) - If there are sub-directories that you do not want to brute-force recursively, use `--exclude-subdirs` ``` python3 dirsearch.py -e php,html,js -u https://target -r --exclude-subdirs image/,media/,css/ ``` ----"
Threads,"The thread number (**-t | --threads**) reflects the number of separated brute force processes. And so the bigger the thread number is, the faster dirsearch runs. By default, the number of threads is 25, but you can increase it if you want to speed up the progress. In spite of that, the speed still depends a lot on the response time of the server. And as a warning, we advise you to keep the threads number not too big because it can cause DoS (Denial of Service). ``` python3 dirsearch.py -e php,htm,js,bak,zip,tgz,txt -u https://target -t 20 ``` ----"
Prefixes / Suffixes,"- **--prefixes**: Add custom prefixes to all entries ``` python3 dirsearch.py -e php -u https://target --prefixes .,admin,_ ``` Wordlist: ``` tools ``` Generated with prefixes: ``` tools .tools admintools _tools ``` - **--suffixes**: Add custom suffixes to all entries ``` python3 dirsearch.py -e php -u https://target --suffixes ~ ``` Wordlist: ``` index.php internal ``` Generated with suffixes: ``` index.php internal index.php~ internal~ ``` ----"
Blacklist,"Inside the `db/` folder, there are several ""blacklist files"". Paths in those files will be filtered from the scan result if they have the same status as mentioned in the filename. Example: If you add `admin.php` into `db/403_blacklist.txt`, whenever you do a scan that `admin.php` returns 403, it will be filtered from the result. ----"
Filters,"Use **-i | --include-status** and **-x | --exclude-status** to select allowed and not allowed response status-codes For more advanced filters: **--exclude-sizes**, **--exclude-texts**, **--exclude-regexps**, **--exclude-redirects** and **--exclude-response** ``` python3 dirsearch.py -e php,html,js -u https://target --exclude-sizes 1B,243KB ``` ``` python3 dirsearch.py -e php,html,js -u https://target --exclude-texts ""403 Forbidden"" ``` ``` python3 dirsearch.py -e php,html,js -u https://target --exclude-regexps ""^Error$"" ``` ``` python3 dirsearch.py -e php,html,js -u https://target --exclude-redirects ""https://(.*).okta.com/*"" ``` ``` python3 dirsearch.py -e php,html,js -u https://target --exclude-response /error.html ``` ----"
Raw request,"dirsearch allows you to import the raw request from a file. The content would be something looked like this: ```http GET /admin HTTP/1.1 Host: admin.example.com Cache-Control: max-age=0 Accept: */* ``` Since there is no way for dirsearch to know what the URI scheme is, you need to set it using the `--scheme` flag. By default, dirsearch automatically detects the scheme. ----"
Wordlist formats,"Supported wordlist formats: uppercase, lowercase, capitalization"
Lowercase:,``` admin index.html ```
Uppercase:,``` ADMIN INDEX.HTML ```
Capital:,``` Admin Index.html ``` ----
Exclude extensions,Use **-X | --exclude-extensions** with an extension list will remove all paths in the wordlist that contains the given extensions `python3 dirsearch.py -u https://target -X jsp` Wordlist: ``` admin.php test.jsp ``` After: ``` admin.php ``` ----
Scan sub-directories,"- From an URL, you can scan a list of sub-directories with **--subdirs**. ``` python3 dirsearch.py -e php,html,js -u https://target --subdirs /,admin/,folder/ ``` ----"
Proxies,"dirsearch supports SOCKS and HTTP proxy, with two options: a proxy server or a list of proxy servers. ``` python3 dirsearch.py -e php,html,js -u https://target --proxy 127.0.0.1:8080 ``` ``` python3 dirsearch.py -e php,html,js -u https://target --proxy socks5://10.10.0.1:8080 ``` ``` python3 dirsearch.py -e php,html,js -u https://target --proxylist proxyservers.txt ``` ----"
Reports,"Supported report formats: **simple**, **plain**, **json**, **xml**, **md**, **csv**,  **html**, **sqlite** ``` python3 dirsearch.py -e php -l URLs.txt --format plain -o report.txt ``` ``` python3 dirsearch.py -e php -u https://target --format html -o target.json ``` ----"
More example commands,"``` cat urls.txt | python3 dirsearch.py --stdin ``` ``` python3 dirsearch.py -u https://target --max-time 360 ``` ``` python3 dirsearch.py -u https://target --auth admin:pass --auth-type basic ``` ``` python3 dirsearch.py -u https://target --header-list rate-limit-bypasses.txt ``` **There are more to discover, try yourself!** Support Docker ---------------"
Install Docker Linux,Install Docker ```sh curl -fsSL https://get.docker.com | bash ``` > To use docker you need superuser power
Build Image dirsearch,"To create image ```sh docker build -t ""dirsearch:v0.4.3"" . ``` > **dirsearch** is the name of the image and **v0.4.3** is the version"
Using dirsearch,"For using ```sh docker run -it --rm ""dirsearch:v0.4.3"" -u target -e php,html,js,zip ``` References --------------- - [Comprehensive Guide on Dirsearch](https://www.hackingarticles.in/comprehensive-guide-on-dirsearch/) by Shubham Sharma - [Comprehensive Guide on Dirsearch Part 2](https://www.hackingarticles.in/comprehensive-guide-on-dirsearch-part-2/) by Shubham Sharma - [How to Find Hidden Web Directories with Dirsearch](https://www.geeksforgeeks.org/how-to-find-hidden-web-directories-with-dirsearch/) by GeeksforGeeks - [GU√çA COMPLETA SOBRE EL USO DE DIRSEARCH](https://esgeeks.com/guia-completa-uso-dirsearch/?feed_id=5703&_unique_id=6076249cc271f) by ESGEEKS - [How to use Dirsearch to detect web directories](https://www.ehacking.net/2020/01/how-to-find-hidden-web-directories-using-dirsearch.html) by EHacking - [dirsearch how to](https://vk9-sec.com/dirsearch-how-to/) by VK9 Security - [Find Hidden Web Directories with Dirsearch](https://null-byte.wonderhowto.com/how-to/find-hidden-web-directories-with-dirsearch-0201615/) by Wonder How To - [Brute force directories and files in webservers using dirsearch](https://upadhyayraj.medium.com/brute-force-directories-and-files-in-webservers-using-dirsearch-613e4a7fa8d5) by Raj Upadhyay - [Live Bug Bounty Recon Session on Yahoo (Amass, crts.sh, dirsearch) w/ @TheDawgyg](https://www.youtube.com/watch?v=u4dUnJ1U0T4) by Nahamsec - [Dirsearch to find Hidden Web Directories](https://medium.com/@irfaanshakeel/dirsearch-to-find-hidden-web-directories-d0357fbe47b0) by Irfan Shakeel - [Getting access to 25000 employees details](https://medium.com/@ehsahil/getting-access-to-25k-employees-details-c085d18b73f0) by Sahil Ahamad - [Best Tools For Directory Bruteforcing](https://secnhack.in/multiple-ways-to-find-hidden-directory-on-web-server/) by Shubham Goyal - [Discover hidden files & directories on a webserver - dirsearch full tutorial](https://www.youtube.com/watch?v=jVxs5at0gxg) by CYBER BYTES Tips --------------- - The server has requests limit? That's bad, but feel free to bypass it, by randomizing proxy with `--proxy-list` - Want to find out config files or backups? Try `--suffixes ~` and `--prefixes .` - Want to find only folders/directories? Why not combine `--remove-extensions` and `--suffixes /`! - The mix of `--cidr`, `-F`, `-q` and will reduce most of noises + false negatives when brute-forcing with a CIDR - Scan a list of URLs, but don't want to see a 429 flood? `--skip-on-status 429` will help you to skip a target whenever it returns 429 - The server contains large files that slow down the scan? You *might* want to use `HEAD` HTTP method instead of `GET` - Brute-forcing CIDR is slow? Probably you forgot to reduce request timeout and request retries. Suggest: `--timeout 3 --retries 1` Contribution --------------- We have been receiving a lot of helps from many people around the world to improve this tool. Thanks so much to everyone who have helped us so far! See [CONTRIBUTORS.md](https://github.com/maurosoria/dirsearch/blob/master/CONTRIBUTORS.md) to know who they are."
Pull requests and feature requests are welcomed,"License --------------- Copyright (C) Mauro Soria (maurosoria@gmail.com) License: GNU General Public License, version 2"
